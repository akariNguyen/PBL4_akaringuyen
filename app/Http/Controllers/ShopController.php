<?php

namespace App\Http\Controllers;

use App\Models\Shop;
use App\Models\User;
use Illuminate\Support\Facades\Hash;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Storage;

class ShopController extends Controller
{
    /**
     * Hi·ªÉn th·ªã form t·∫°o shop (khi ƒëƒÉng k√Ω seller)
     */
    public function create(Request $request)
    {
        // N·∫øu ƒëang trong qu√° tr√¨nh ƒëƒÉng k√Ω seller (ch∆∞a c√≥ user trong DB)
        if ($request->session()->has('pending_seller')) {
            return view('shop_create');
        }

        // N·∫øu ƒë√£ c√≥ user ƒëƒÉng nh·∫≠p th√¨ ki·ªÉm tra role
        $user = Auth::user();
        if ($user && $user->role === 'seller') {
            $existing = Shop::where('user_id', $user->id)->first();
            if ($existing) {
                return redirect()->route('seller.dashboard')
                    ->with('success', 'B·∫°n ƒë√£ t·∫°o shop r·ªìi.');
            }
            return view('shop_create');
        }

        // Kh√¥ng h·ª£p l·ªá ‚Üí ch·∫∑n
        abort(403);
    }

    /**
     * X·ª≠ l√Ω l∆∞u shop m·ªõi (khi ƒëƒÉng k√Ω ng∆∞·ªùi b√°n)
     */
    public function store(Request $request)
    {
        $pendingSeller = session('pending_seller');

        if (!$pendingSeller) {
            return redirect()->route('register')
                ->withErrors(['register' => 'B·∫°n c·∫ßn ƒëƒÉng k√Ω tr∆∞·ªõc khi t·∫°o shop.']);
        }

        // Validate shop
        $validated = $request->validate([
            'name' => 'required|string|max:255',
            'description' => 'nullable|string',
            'logo' => 'nullable|image|max:2048',
        ]);

        $logoPath = null;
        if ($request->hasFile('logo')) {
            $logoPath = $request->file('logo')->store('shops', 'public');
        }

        // ‚úÖ T·∫°o user m·ªõi
        $defaultAvatar = $pendingSeller['gender'] === 'female'
            ? '/Picture/Avata/avatar_macdinh_nu.jpg'
            : '/Picture/Avata/avatar_macdinh_nam.jpg';

        $user = User::create([
            'name' => $pendingSeller['name'],
            'email' => $pendingSeller['email'],
            'phone' => $pendingSeller['phone'],
            'password' => Hash::make($pendingSeller['password']),
            'gender' => $pendingSeller['gender'],
            'avatar_path' => $defaultAvatar,
            'role' => 'seller',
            'status' => 'active',
        ]);

        // ‚úÖ T·∫°o shop ch·ªù duy·ªát
        Shop::create([
            'user_id' => $user->id,
            'name' => $validated['name'],
            'logo_path' => $logoPath,
            'description' => $validated['description'] ?? null,
            'registered_at' => now(),
            'status' => 'pending', // Ch·ªù duy·ªát
        ]);

        session()->forget('pending_seller');
        Auth::login($user);

        return redirect()->route('seller.dashboard')
            ->with('success', 'T·∫°o shop th√†nh c√¥ng! Shop c·ªßa b·∫°n ƒëang ch·ªù duy·ªát.');
    }

    /**
     * C·∫≠p nh·∫≠t th√¥ng tin shop t·ª´ t√†i kho·∫£n seller
     */
    public function updateAccount(Request $request)
    {
        $user = Auth::user();
        if (!$user || $user->role !== 'seller') {
            abort(403);
        }

        $shop = Shop::where('user_id', $user->id)->first();
        if (!$shop) {
            return response()->json([
                'success' => false,
                'message' => 'Kh√¥ng t√¨m th·∫•y shop ƒë·ªÉ c·∫≠p nh·∫≠t.',
            ], 404);
        }

        // üö´ N·∫øu shop ƒëang ch·ªù duy·ªát ‚Üí kh√¥ng cho ch·ªânh s·ª≠a
        if ($shop->status === 'pending') {
            return response()->json([
                'success' => false,
                'message' => 'üïí Shop c·ªßa b·∫°n ƒëang ch·ªù duy·ªát, kh√¥ng th·ªÉ ch·ªânh s·ª≠a l√∫c n√†y.',
            ], 403);
        }

        // üö´ N·∫øu shop b·ªã ƒë√¨nh ch·ªâ ‚Üí kh√¥ng cho ch·ªânh s·ª≠a
        if ($shop->status === 'suspended') {
            return response()->json([
                'success' => false,
                'message' => 'üö´ Shop c·ªßa b·∫°n ƒëang b·ªã t·∫°m kh√≥a. Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t th√¥ng tin.',
            ], 403);
        }

        // ‚úÖ Validate d·ªØ li·ªáu
        $validated = $request->validate([
            'name' => 'required|string|max:255',
            'description' => 'nullable|string',
            'logo' => 'nullable|image|max:4096',
        ]);

        // ‚úÖ C·∫≠p nh·∫≠t c√°c tr∆∞·ªùng h·ª£p l·ªá
        $shop->name = $validated['name'];
        $shop->description = $validated['description'] ?? $shop->description;

        if ($request->hasFile('logo')) {
            $shop->logo_path = $request->file('logo')->store('shops', 'public');
        }

        $shop->save();

        return response()->json([
            'success' => true,
            'message' => '‚úÖ C·∫≠p nh·∫≠t th√¥ng tin shop th√†nh c√¥ng!',
            'name' => $shop->name,
            'logo' => $shop->logo_path
                ? Storage::disk('public')->url($shop->logo_path)
                : '/Picture/logo.png',
        ]);
    }

    /**
     * Hi·ªÉn th·ªã trang "Shop b·ªã t·ª´ ch·ªëi"
     */
    public function showRejected()
    {
        $shop = auth()->user()->shop;

        if (!$shop) {
            return redirect()->route('shops.create');
        }

        return view('shop_rejected', compact('shop'));
    }

    /**
     * Ng∆∞·ªùi b√°n g·ª≠i l·∫°i y√™u c·∫ßu duy·ªát shop sau khi b·ªã t·ª´ ch·ªëi
     */
    public function resubmit(Request $request)
    {
        $shop = auth()->user()->shop;

        if (!$shop) {
            return redirect()->route('seller.dashboard')->with('error', 'Kh√¥ng t√¨m th·∫•y shop.');
        }

        // üö´ N·∫øu shop ƒëang active ho·∫∑c pending th√¨ kh√¥ng cho g·ª≠i l·∫°i
        if (in_array($shop->status, ['active', 'pending'])) {
            return redirect()->route('seller.dashboard')
                ->with('error', 'Shop c·ªßa b·∫°n ƒëang ho·∫°t ƒë·ªông ho·∫∑c ƒëang ch·ªù duy·ªát, kh√¥ng th·ªÉ g·ª≠i l·∫°i.');
        }

        // ‚úÖ Validate d·ªØ li·ªáu
        $validated = $request->validate([
            'name' => 'required|string|max:255',
            'description' => 'nullable|string',
            'logo' => 'nullable|image|mimes:jpeg,png,jpg,gif|max:2048',
        ]);

        // ‚úÖ C·∫≠p nh·∫≠t l·∫°i th√¥ng tin shop v√† chuy·ªÉn sang pending
        $shop->update([
            'name' => $validated['name'],
            'description' => $validated['description'] ?? null,
            'status' => 'pending',
        ]);

        // ‚úÖ Upload logo n·∫øu c√≥
        if ($request->hasFile('logo')) {
            $path = $request->file('logo')->store('shop_logos', 'public');
            $shop->logo_path = $path;
            $shop->save();
        }

        // ‚úÖ ƒêƒÉng xu·∫•t user (ƒë·ªÉ ƒë·ª£i duy·ªát)
        auth()->logout();

        return redirect()->route('login')
            ->with('success', '‚úÖ ƒê√£ g·ª≠i l·∫°i y√™u c·∫ßu th√†nh c√¥ng! Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i sau khi shop ƒë∆∞·ª£c duy·ªát.');
    }
    public function redirectDashboard()
{
    $user = Auth::user();

    if (!$user || $user->role !== 'seller') {
        abort(403);
    }

    $shop = Shop::where('user_id', $user->id)->first();

    if (!$shop) {
        return redirect()->route('shops.create')
            ->with('error', 'B·∫°n ch∆∞a t·∫°o shop n√†o.');
    }

    if ($shop->status === 'pending') {
        return view('seller_dashboard', compact('shop')); // hi·ªÉn th·ªã giao di·ªán ch·ªù duy·ªát
    }

    if ($shop->status === 'rejected') {
        return redirect()->route('seller.shop.rejected');
    }

    if ($shop->status === 'suspended') {
        return view('seller.suspended', compact('shop'));
    }

    // ‚úÖ N·∫øu shop active, render dashboard b√¨nh th∆∞·ªùng
    return view('seller_dashboard', compact('shop'));
    }

}
